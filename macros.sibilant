(namespace react)
(macro lower-case? (str)
       `(= (.to-lower-case @str) @str))
(macro upper-case? (str)
       `(= (.to-upper-case @str) @str))

(macro create-element (tagname ...attributes-and-contents)
       (var attributes []
            contents []
            first-tagname-letter (pipe tagname (transpile) (output-formatter) (first))
            tag (if (lower-case? first-tagname-letter) (^core/quote tagname) tagname))

       (each (arg index) attributes-and-contents
             (if
              (and (empty? contents)
                   (node? arg 'literal)
                   (= "!" (last arg.token)))
              (do
               (attributes.push (merge-into (clone arg) { token (arg.token.slice 0 -1) }))
               (attributes.push 'true))

              (or (not (empty? contents))
                  (and (even? attributes.length)
                       (or (node? arg 'expression 'string)
                           (= (+ index 1) attributes-and-contents.length))))
              (contents.push arg)

              (attributes.push arg)))

       `(React.create-element @tag @(if (empty? attributes) 'null `(hash ...@attributes)) ...@contents ))

(macro tags (...tags)
       (each tag tags
             `(macro @tag (...args)
                     (var tag (quote @tag))
                     `(react/create-element @tag ...@args))))



(macro def-class (name ...definition)
       `(tags @name)
       `(var @name (React.create-class (hash display-name (quote @name) ...@definition))))
       
