(namespace react)

(macro create-element (tagname ...attributes-and-contents)
       (var attributes []
            contents []
            first-tagname-letter (pipe tagname (transpile) (output-formatter) (first))
            tag (if (lower-case? first-tagname-letter) (^core/quote tagname) tagname))

       (each (arg index) attributes-and-contents
             (if
              (and (empty? contents)
                   (node? arg 'literal)
                   (= "!" (last arg.token)))
              (do
               (attributes.push (merge-into (clone arg) { token (arg.token.slice 0 -1) }))
               (attributes.push 'true))

              (or (not (empty? contents))
                  (and (even? attributes.length)
                       (or (node? arg 'expression 'string)
                           (= (+ index 1) attributes-and-contents.length))))
              (contents.push arg)

              (attributes.push arg)))

       `(React.create-element @tag
                              @(if (empty? attributes) 'null `(hash ...@attributes))
                              ...@contents))

(macro tags (...tags)
       (tags.map (#(tag)
                   `(macro @tag (...args)
                           (var tag (quote @tag))
                           `(react/create-element @tag ...@args)))))



(macro def-class (name ...attributes-and-contents)
       (var attributes []
            contents [])

       (each (arg index) attributes-and-contents
             (if
              (and (empty? contents)
                   (node? arg 'literal)
                   (= "!" (last arg.token)))
              (do
               (attributes.push (merge-into (clone arg) { token (arg.token.slice 0 -1) }))
               (attributes.push 'true))

              (or (not (empty? contents))
                  (and (even? attributes.length)
                       (or (node? arg 'expression 'string)
                           (= (+ index 1) attributes-and-contents.length))))
              (contents.push arg)

              (attributes.push arg)))


       (unless (empty? contents)
               (attributes.push 'render)
               (attributes.push `(lambda @{ args []
                                            node (first contents)
                                            body contents })))
       [
        `(tags @name)
         `(var @name (React.create-class (hash display-name (quote @name)
                                               ...@attributes)))
         ])


(macro def-tag (fn props ...body)
       [ `(tags @fn)
         (if (= 'brace props.type)
             `(def @fn (props)
                   (var @props props)
                   ...@body)
             `(def @fn @props ...@body))
          ])



(macro import-classes! (...alternating-sources-and-class-names)
       (var classes []
            requires (inject [] alternating-sources-and-class-names
                             (#(pairs node)
                               (pairs.concat
                                (if
                                 (and (odd? pairs.length) (node? node 'tick 'string))
                                 `(require @node)

                                 (even? pairs.length)
                                 (do
                                  (assign classes (classes.concat
                                                   (if (node? node 'brace)
                                                       node.contents
                                                       [node])))
                                  node)

                                 node)))))

       [ `(tags ...@classes) `(var ...@requires) ])
