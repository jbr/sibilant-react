{"version":3,"sources":["example.sibilant","macros.sibilant","src/helpers.sibilant","include/macros.sibilant"],"names":[],"mappings":"AACA;AADA;AC0Ec,IDpEL,UCoEK,yBAAU,KAAV;AAAA;AAAA;AAAA,EACK,IDrEE,KCqEF,G,KCqIgD,MDrIhD,CADL;AAAA,SAjDL,mBDlBA,C,GAAA,E,IAAA,EAAG,eAAH,EAAmB,KAAnB,CCmEK;AAAA,GD1Ed;ACkEU,ID1DY,UC0DZ,GAAY,iBAAD,CAAoB;AAAA,EAAM,WAAN,EAAmB,CD1DtC,UC0DsC,CAAnB;AAAA,EDzD9B,eCyD8B,EDzDZ;AAAA;AAAA;AAAA,WAAI;AAAA,MAAE,KAAF,EAAQ,KAAR;AAAA,MAAc,KAAd,EAAoB,CAApB;AAAA,KAAJ;AAAA,ICyDY;AAAA,EDxD9B,WCwD8B,EDxDjB;AAAA;AAAA;AAAA,WAAK,aAAD,CAAgB;AAAA,MAAE,KAAF,EAAQ,CAAG,CAAH,GAAK,gBAAL,CAAR;AAAA,MACE,KADF,EACQ,EAAK,gBAAL,CADR;AAAA,KAAhB,CAAJ;AAAA,ICwDiB;AAAA,E,MAAA,EALR;AAAA;AAAA;AAAA,WApCxB,mBDZE,C,KAAA,ECamD;AAAA,MDb9C,KCa8C,EDbxC;AAAA,QAAE,eAAF,EAAmB;AAAA,cAAI,gBAAJ;AAAA,YGqyBG,OHryBkB,CAAC,SAAD,CGqyBlB,CHryBH;AAAA;AAAA,YGuyBM,OHvyB2B,CAAC,GAAD,CGuyB3B,CHvyBN;AAAA;AAAA,qBAAnB;AAAA,QACE,KADF,EACQ,CAAC,KAAD,CADR;AAAA,OCawC;AAAA,MDX9C,OCW8C,EDXrC,gBCWqC;AAAA,KDbnD,ECYF,mBDTO,C,IAAA,E,IAAA,EAAI,gBAAJ,CAHL,ECYF,mBDRO,C,UAAA,ECS8C,EDTlC,KCSkC,EDT3B,gBCS2B,EDT9C,CAJL,ECYF,mBDPO,C,GAAA,E,IAAA,EAAG,iBAAH,EAAqB;AAAA,UAAI,gBAAJ;AAAA,QGgyBO,OHhyBc,IGgyBd,CHhyBP;AAAA;AAAA,QGkyBU,OHlyBgB,KGkyBhB,CHlyBV;AAAA;AAAA,iBAArB,CALL,CCgDsB;AAAA,IAKQ;AAAA,CAApB,CAAX,CDlEV;AAoBC,eAAD,CCKS,mBDJR,C,KAAA,ECK6D,EDLxD,ECKwD,EDLpD,MCKoD,EDL7D,ECIQ,mBDHH,C,IAAA,E,IAAA,EAAI,UAAJ,CADL,EAEW,GAAG,CAAH,IAAK,CAAL,IAAO,CAAP,GAAN,CAAE,GAAF,CACM;AAAA;AAAA;AAAA,SCCH,mBDDO,C,UAAA,ECE8C;AAAA,IDFlC,GCEkC,EEosBjD,SAzFW,C,CAAA,CF3mBsC;AAAA,IDF1B,KCE0B,EEosBjD,SAzFW,C,CAAA,CF3mBsC;AAAA,GDF9C,CAAJ;AAAA,EADN,CAFL,CADD,EAMI,uBAAD,CAA4B,CAAC,GAAD,CAA5B,CANH,CApBA","sourcesContent":["(include \"sibilant-react/macros\")\n(source-mapping-url \"/example.map\")\n(import-namespace react)\n\n(tags p div h1 h2 span)\n\n(def-tag ClickCount {count}\n         (p \"click count: \" count))\n         \n\n(def-class LikeButton\n           get-initial-state (#> { liked false count 0 })\n           handle-click (#> (this.set-state { count (+ 1 this.state.count)\n                                              liked (not this.state.liked) }))\n\n           (div style { background-color (if this.state.liked 'light-blue 'red)\n                        color 'white }\n                on-click this.handle-click\n                (h2 this.props.label)\n                (ClickCount count: this.state.count)\n                (p \"This button is \" (if this.state.liked \"on\" \"off\"))))\n\n(ReactDOM.render\n (div id: \"main\"\n      (h1 \"Example!\")\n      (.map `[ a b c ]\n            (#> (LikeButton key #0, label #0))))\n\n \n (document.get-element-by-id 'app))\n","(namespace react)\n\n(macro create-element (tagname ...attributes-and-contents)\n       (var attributes []\n            contents []\n            first-tagname-letter (pipe tagname (transpile) (output-formatter) (first))\n            tag (if (lower-case? first-tagname-letter) (^core/quote tagname) tagname))\n\n       (each (arg index) attributes-and-contents\n             (if\n              (and (empty? contents)\n                   (node? arg 'literal)\n                   (= \"!\" (last arg.token)))\n              (do\n               (attributes.push (merge-into (clone arg) { token (arg.token.slice 0 -1) }))\n               (attributes.push 'true))\n\n              (or (not (empty? contents))\n                  (and (even? attributes.length)\n                       (or (node? arg 'expression 'string)\n                           (= (+ index 1) attributes-and-contents.length))))\n              (contents.push arg)\n\n              (attributes.push arg)))\n\n       `(React.create-element @tag\n                              @(if (empty? attributes) 'null `(hash ...@attributes))\n                              ...@contents))\n\n(macro tags (...tags)\n       (tags.map (#(tag)\n                   `(macro @tag (...args)\n                           (var tag (quote @tag))\n                           `(react/create-element @tag ...@args)))))\n\n\n\n(macro def-class (name ...attributes-and-contents)\n       (var attributes []\n            contents [])\n\n       (each (arg index) attributes-and-contents\n             (if\n              (and (empty? contents)\n                   (node? arg 'literal)\n                   (= \"!\" (last arg.token)))\n              (do\n               (attributes.push (merge-into (clone arg) { token (arg.token.slice 0 -1) }))\n               (attributes.push 'true))\n\n              (or (not (empty? contents))\n                  (and (even? attributes.length)\n                       (or (node? arg 'expression 'string)\n                           (= (+ index 1) attributes-and-contents.length))))\n              (contents.push arg)\n\n              (attributes.push arg)))\n\n\n       (unless (empty? contents)\n               (attributes.push 'render)\n               (attributes.push `(lambda @{ args []\n                                            node (first contents)\n                                            body contents })))\n       [\n        `(tags @name)\n         `(var @name (React.create-class (hash display-name (quote @name)\n                                               ...@attributes)))\n         ])\n\n\n(macro def-tag (fn props ...body)\n       [ `(tags @fn)\n         (if (= 'brace props.type)\n             `(def @fn (props)\n                   (var @props props)\n                   ...@body)\n             `(def @fn @props ...@body))\n          ])\n\n\n\n(macro import-classes! (...alternating-sources-and-class-names)\n       (var classes []\n            requires (inject [] alternating-sources-and-class-names\n                             (#(pairs node)\n                               (pairs.concat\n                                (if\n                                 (and (odd? pairs.length) (node? node 'tick 'string))\n                                 `(require @node)\n\n                                 (even? pairs.length)\n                                 (do\n                                  (assign classes (classes.concat\n                                                   (if (node? node 'brace)\n                                                       node.contents\n                                                       [node])))\n                                  node)\n\n                                 node)))))\n\n       [ `(tags ...@classes) `(var ...@requires) ])\n",null,null]}